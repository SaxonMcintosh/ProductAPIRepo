{
	"info": {
		"_postman_id": "4af9c5d7-65d5-4e92-866e-efde40dbff3f",
		"name": "productsapp-automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5448c32c-798c-42bb-ac48-3e1cb9d05340",
						"exec": [
							"// JSON general response tests\r",
							"pm.test(\"response to be 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response time less than 1000MS\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// JSON structure tests\r",
							"pm.test(\"response to have an Id\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Id\");\r",
							"});\r",
							"pm.test(\"response to have a Name\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Name\");\r",
							"});\r",
							"pm.test(\"response to have a Category\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Category\");\r",
							"});\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Price\");\r",
							"});\r",
							"\r",
							"// JSON content tests\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"value of [0].Id to be 1\", function(){\r",
							"    pm.expect(1).to.equal(jsonData[0].Id);\r",
							"});\r",
							"pm.test(\"value of [0].Name to be Pasketti and Yeetballs\", function(){\r",
							"    pm.expect(\"Pasketti and Yeetballs\").to.equal(jsonData[0].Name);\r",
							"});\r",
							"pm.test(\"value of [0].Category to be Grockeries\", function(){\r",
							"    pm.expect(\"Grockeries\").to.equal(jsonData[0].Category);\r",
							"});\r",
							"pm.test(\"value of [0].Price to be 100.0\", function(){\r",
							"    pm.expect(100.0).to.equal(jsonData[0].Price);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [1].Id to be 2\", function(){\r",
							"    pm.expect(2).to.equal(jsonData[1].Id);\r",
							"});\r",
							"pm.test(\"value of [1].Name to be Yo-yo Ma\", function(){\r",
							"    pm.expect(\"Yo-yo Ma\").to.equal(jsonData[1].Name);\r",
							"});\r",
							"pm.test(\"value of [1].Category to be Cellists\", function(){\r",
							"    pm.expect(\"Cellists\").to.equal(jsonData[1].Category);\r",
							"});\r",
							"pm.test(\"value of [1].Price to be 50.0\", function(){\r",
							"    pm.expect(50.0).to.equal(jsonData[1].Price);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [2].Id to be 3\", function(){\r",
							"    pm.expect(3).to.equal(jsonData[2].Id);\r",
							"});\r",
							"pm.test(\"value of [2].Name to be Mjolnir\", function(){\r",
							"    pm.expect(\"Mjolnir\").to.equal(jsonData[2].Name);\r",
							"});\r",
							"pm.test(\"value of [2].Category to be Tangible Metaphors\", function(){\r",
							"    pm.expect(\"Tangible Metaphors\").to.equal(jsonData[2].Category);\r",
							"});\r",
							"pm.test(\"value of [2].Price to be 80.75\", function(){\r",
							"    pm.expect(80.75).to.equal(jsonData[2].Price);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:44359/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "44359",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get One Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7cde4d3c-27eb-4102-b215-b8c542596d77",
						"exec": [
							"// JSON general response tests\r",
							"pm.test(\"response not to be 404 NOT FOUND\", function(){\r",
							"    pm.response.to.not.have.status(404);\r",
							"});\r",
							"pm.test(\"response time less than 1000MS\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// JSON structure tests\r",
							"pm.test(\"response to have an Id\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Id\");\r",
							"});\r",
							"pm.test(\"response to have a Name\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Name\");\r",
							"});\r",
							"pm.test(\"response to have a Category\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Category\");\r",
							"});\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Price\");\r",
							"});\r",
							"\r",
							"// JSON content tests\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"value of Id to be 3\", function(){\r",
							"    pm.expect(3).to.equal(jsonData.Id);\r",
							"});\r",
							"pm.test(\"value of Name to be Mjolnir\", function(){\r",
							"    pm.expect(\"Mjolnir\").to.equal(jsonData.Name);\r",
							"});\r",
							"pm.test(\"value of Category to be Tangible Metaphors\", function(){\r",
							"    pm.expect(\"Tangible Metaphors\").to.equal(jsonData.Category);\r",
							"});\r",
							"pm.test(\"value of Price to be 80.75\", function(){\r",
							"    pm.expect(80.75).to.equal(jsonData.Price);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:44359/api/products/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "44359",
					"path": [
						"api",
						"products",
						"3"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}